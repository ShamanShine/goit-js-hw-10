{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Функция для преобразования времени из миллисекунд в дни, часы, минуты и секунды\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// Функция для добавления ведущего нуля, если значение меньше 10\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\n// Обработчик события при закрытии календаря\nconst onCloseHandler = selectedDates => {\n  const userSelectedDate = selectedDates[0];\n  const startButton = document.querySelector('[data-start]');\n\n  // Проверка, выбрана ли дата в будущем\n  if (userSelectedDate < new Date()) {\n    // Вывод сообщения об ошибке и блокировка кнопки start\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n      position: 'topCenter',\n    });\n    startButton.disabled = true;\n  } else {\n    // Разблокировка кнопки start\n    startButton.disabled = false;\n  }\n};\n\n// Инициализация flatpickr для элемента с id 'datetime-picker'\nconst datetimePicker = flatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: onCloseHandler, // Подключаем обработчик события\n});\n\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\n\n// Обработчик события для кнопки start\ndocument.querySelector('[data-start]').addEventListener('click', () => {\n  const inputTimer = document.querySelector('#datetime-picker');\n  inputTimer.setAttribute('disabled', 'disabled');\n  const userSelectedDate = datetimePicker.selectedDates[0];\n  const startButton = document.querySelector('[data-start]');\n\n  // Проверка, выбрана ли дата в будущем\n  if (userSelectedDate < new Date()) {\n    // Вывод сообщения об ошибке и завершение функции\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n      position: 'topCenter',\n    });\n    return;\n  }\n\n  // Блокировка кнопки start\n  startButton.disabled = true;\n\n  // Установка интервала для обновления таймера каждую секунду\n  const intervalId = setInterval(() => {\n    const currentTime = new Date();\n    const timeDifference = userSelectedDate - currentTime;\n\n    // Проверяем достигнута ли конечная дата\n    if (timeDifference <= 0) {\n      // Остановка интервала, обновление интерфейса и вывод сообщения об успешном завершении\n      clearInterval(intervalId);\n      updateTimeDisplay(convertMs(0));\n      iziToast.success({\n        title: 'Success',\n        message: 'Countdown completed!',\n        position: 'topCenter',\n      });\n      return;\n    }\n\n    // Обновление интерфейса таймера с оставшимся временем\n    updateTimeDisplay(convertMs(timeDifference));\n  }, 1000);\n});\n\n// Функция для обновления интерфейса таймера\nfunction updateTimeDisplay({ days, hours, minutes, seconds }) {\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent =\n    addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent =\n    addLeadingZero(seconds);\n}\n"],"names":["convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","onCloseHandler","selectedDates","userSelectedDate","startButton","iziToast","datetimePicker","flatpickr","intervalId","timeDifference","updateTimeDisplay"],"mappings":"sFAOA,SAASA,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACpC,CAGA,MAAMC,EAAiBC,GAAiB,CACtC,MAAMC,EAAmBD,EAAc,CAAC,EAClCE,EAAc,SAAS,cAAc,cAAc,EAGrDD,EAAmB,IAAI,MAEzBE,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WAChB,CAAK,EACDD,EAAY,SAAW,IAGvBA,EAAY,SAAW,EAE3B,EAGME,EAAiBC,EAAU,mBAAoB,CACnD,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAASN,CACX,CAAC,EAEKG,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GAGvB,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAAS,IAAM,CAClD,SAAS,cAAc,kBAAkB,EACjD,aAAa,WAAY,UAAU,EAC9C,MAAMD,EAAmBG,EAAe,cAAc,CAAC,EACjDF,EAAc,SAAS,cAAc,cAAc,EAGzD,GAAID,EAAmB,IAAI,KAAQ,CAEjCE,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WAChB,CAAK,EACD,MACD,CAGDD,EAAY,SAAW,GAGvB,MAAMI,EAAa,YAAY,IAAM,CAEnC,MAAMC,EAAiBN,EADH,IAAI,KAIxB,GAAIM,GAAkB,EAAG,CAEvB,cAAcD,CAAU,EACxBE,EAAkBjB,EAAU,CAAC,CAAC,EAC9BY,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,uBACT,SAAU,WAClB,CAAO,EACD,MACD,CAGDK,EAAkBjB,EAAUgB,CAAc,CAAC,CAC5C,EAAE,GAAI,CACT,CAAC,EAGD,SAASC,EAAkB,CAAE,KAAAf,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC5D,SAAS,cAAc,aAAa,EAAE,YAAcC,EAAeJ,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcI,EAAeH,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YACvCG,EAAeF,CAAO,EACxB,SAAS,cAAc,gBAAgB,EAAE,YACvCE,EAAeD,CAAO,CAC1B"}